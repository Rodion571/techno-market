import React, { useState, useEffect, useCallback } from 'react';
import { useNavigate } from 'react-router-dom';
import { useCart } from '../context/CartContext';
import { useOrder } from '../context/OrderContext';

const Checkout = () => {
  const { cart, clearCart } = useCart();
  const { addOrder } = useOrder();

  const [name, setName] = useState('');
  const [email, setEmail] = useState('');
  const [mobilePhone, setMobilePhone] = useState('');
  const [address, setAddress] = useState('');
  const [paymentMethod, setPaymentMethod] = useState('monoCard');
  const [deliveryMethod, setDeliveryMethod] = useState('pickup');
  const [totalPrice, setTotalPrice] = useState(0);
  const [paymentFee, setPaymentFee] = useState(0);
  const [promoCode, setPromoCode] = useState('');
  const [discount, setDiscount] = useState(0);
  const [promoMessage, setPromoMessage] = useState('');
  const [paymentDeliveryError, setPaymentDeliveryError] = useState('');

  const navigate = useNavigate();

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Ö–æ–¥–∞ –ø–æ localStorage
  const isLoggedIn = Boolean(localStorage.getItem('userEmail'));

  const applyPromo = () => {
    if (promoCode.toUpperCase() === 'ZNYJKA10') {
      const cartTotal = cart.reduce((total, item) => total + item.price * item.quantity, 0);
      const discountValue = cartTotal * 0.1;
      setDiscount(discountValue);
      setPromoMessage('–ü—Ä–æ–º–æ–∫–æ–¥ –∑–∞—Å—Ç–æ—Å–æ–≤–∞–Ω–æ! –ó–Ω–∏–∂–∫–∞ 10%');
    } else {
      setDiscount(0);
      setPromoMessage('–ù–µ–¥—ñ–π—Å–Ω–∏–π –ø—Ä–æ–º–æ–∫–æ–¥');
    }
  };

  const calculateTotal = useCallback(() => {
    const cartTotal = cart.reduce((total, item) => total + item.price * item.quantity, 0);
    const discountedTotal = cartTotal - discount;

    // –í–∏–∑–Ω–∞—á–µ–Ω–Ω—è –≤–∞—Ä—Ç–æ—Å—Ç—ñ –¥–æ—Å—Ç–∞–≤–∫–∏
    let deliveryCost = 0;
    if (deliveryMethod === 'pickup') deliveryCost = 0;
    else if (deliveryMethod === 'novaPoshta') deliveryCost = 70;
    else if (deliveryMethod === 'ukrPost') deliveryCost = 60;
    else if (deliveryMethod === 'expressCompany') deliveryCost = 150;

    // –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ –∫–æ–º—ñ—Å—ñ—ó –∑–∞ –æ–ø–ª–∞—Ç—É
    let fee = 0;
    if (paymentMethod === 'monoCard' || paymentMethod === 'privatCard') {
      fee = discountedTotal * 0.03; // 3% –∫–æ–º—ñ—Å—ñ—è –¥–ª—è –∫–∞—Ä—Ç –ü—Ä–∏–≤–∞—Ç —Ç–∞ –ú–æ–Ω–æ–±–∞–Ω–∫
    } else if (paymentMethod === 'applePay' || paymentMethod === 'googlePay') {
      fee = discountedTotal * 0.02; // 2% –¥–ª—è ApplePay —Ç–∞ GooglePay
    } else if (paymentMethod === 'cash') {
      // –ì–æ—Ç—ñ–≤–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç—ñ–ª—å–∫–∏ –ø—Ä–∏ —Å–∞–º–æ–≤–∏–≤–æ–∑—ñ, –∫–æ–º—ñ—Å—ñ—è 0
      fee = 0;
    }

    setPaymentFee(fee.toFixed(2));
    const finalPrice = discountedTotal + deliveryCost + fee;
    setTotalPrice(finalPrice.toFixed(2));
  }, [cart, discount, paymentMethod, deliveryMethod]);

  useEffect(() => {
    calculateTotal();
  }, [cart, discount, paymentMethod, deliveryMethod, calculateTotal]);

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å –æ–ø–ª–∞—Ç—ã –∏ –¥–æ—Å—Ç–∞–≤–∫–∏
  useEffect(() => {
    if (paymentMethod === 'cash' && deliveryMethod !== 'pickup') {
      setPaymentDeliveryError('–û–ø–ª–∞—Ç–∞ –≥–æ—Ç—ñ–≤–∫–æ—é –º–æ–∂–ª–∏–≤–∞ –ª–∏—à–µ –ø—Ä–∏ —Å–∞–º–æ–≤–∏–≤–æ–∑—ñ!');
    } else {
      setPaymentDeliveryError('');
    }
  }, [paymentMethod, deliveryMethod]);

  const handleSubmit = (e) => {
    e.preventDefault();

    if (!isLoggedIn) {
      alert('–ë—É–¥—å –ª–∞—Å–∫–∞, —É–≤—ñ–π–¥—ñ—Ç—å, —â–æ–± –æ—Ñ–æ—Ä–º–∏—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è.');
      navigate('/');
      return;
    }

    // –í–∞–ª—ñ–¥–∞—Ü—ñ—è –º–æ–±—ñ–ª—å–Ω–æ–≥–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É (–ø—Ä–æ—Å—Ç–∏–π –ø–∞—Ç–µ—Ä–Ω, –º–æ–∂–Ω–∞ —É—Å–∫–ª–∞–¥–Ω–∏—Ç–∏)
    const phoneRegex = /^\+?\d{10,15}$/;
    if (!mobilePhone || !phoneRegex.test(mobilePhone)) {
      alert('–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –∫–æ—Ä–µ–∫—Ç–Ω–∏–π –º–æ–±—ñ–ª—å–Ω–∏–π —Ç–µ–ª–µ—Ñ–æ–Ω (—Ü–∏—Ñ—Ä–∏, 10-15 —Å–∏–º–≤–æ–ª—ñ–≤, –º–æ–∂–Ω–∞ –ø–æ—á–∏–Ω–∞—Ç–∏ –∑ +)');
      return;
    }

    if (!name || !email || (deliveryMethod !== 'pickup' && !address)) {
      alert('–ë—É–¥—å –ª–∞—Å–∫–∞, –∑–∞–ø–æ–≤–Ω—ñ—Ç—å –≤—Å—ñ –Ω–µ–æ–±—Ö—ñ–¥–Ω—ñ –ø–æ–ª—è!');
      return;
    }

    if (paymentDeliveryError) {
      alert(paymentDeliveryError);
      return;
    }

    const newOrder = {
      customerName: name,
      customerEmail: email,
      customerPhone: mobilePhone,
      deliveryAddress: deliveryMethod === 'pickup' ? '–°–∞–º–æ–≤–∏–≤—ñ–∑ –∑—ñ —Å–∫–ª–∞–¥—É SwiftCargo' : address,
      paymentMethod,
      deliveryMethod,
      products: cart,
      total: parseFloat(totalPrice),
      discount: parseFloat(discount),
      promoCode: promoCode || null,
      createdAt: new Date().toISOString(),
    };

    addOrder(newOrder);
    clearCart();
    alert(`–î—è–∫—É—î–º–æ –∑–∞ –ø–æ–∫—É–ø–∫—É, ${name}! –í–∞—à–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–æ.`);
    navigate('/');
  };

  return (
    <div className="checkout">
      <h2>–ü–µ—Ä–µ–ª—ñ–∫ —Ç–æ–≤–∞—Ä—ñ–≤ —É –≤–∞—à–æ–º—É –∫–æ—à–∏–∫—É</h2>
      {cart.length === 0 ? (
        <p>–í–∞—à –∫–æ—à–∏–∫ –ø–æ—Ä–æ–∂–Ω—ñ–π.</p>
      ) : (
        <div className="cart-items-list">
          {cart.map((item) => (
            <div key={item.id} className="cart-item">
              <p>{item.name} x{item.quantity} - {item.price * item.quantity} –≥—Ä–Ω</p>
            </div>
          ))}
        </div>
      )}

      <div className="promo-code">
        <label htmlFor="promo">–ü—Ä–æ–º–æ–∫–æ–¥:üö©</label>
        <input
          type="text"
          id="promo"
          value={promoCode}
          onChange={(e) => setPromoCode(e.target.value)}
        />
        <button type="button" onClick={applyPromo}>–ó–∞—Å—Ç–æ—Å—É–≤–∞—Ç–∏</button>
        {promoMessage && <p>{promoMessage}</p>}
      </div>

      <h2>–û—Ñ–æ—Ä–º–ª–µ–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è</h2>
      <form onSubmit={handleSubmit}>
        <div className="checkout-field">
          <label htmlFor="name">–Ü–º'—è:ü™™</label>
          <input
            type="text"
            id="name"
            value={name}
            onChange={(e) => setName(e.target.value)}
            required
          />
        </div>

        <div className="checkout-field">
          <label htmlFor="email">–ï–ª–µ–∫—Ç—Ä–æ–Ω–Ω–∞ –ø–æ—à—Ç–∞:üíª</label>
          <input
            type="email"
            id="email"
            value={email}
            onChange={(e) => setEmail(e.target.value)}
            required
          />
        </div>

        <div className="checkout-field">
          <label htmlFor="mobilePhone">–ú–æ–±—ñ–ª—å–Ω–∏–π —Ç–µ–ª–µ—Ñ–æ–Ω:üì≤</label>
          <input
            type="tel"
            id="mobilePhone"
            value={mobilePhone}
            onChange={(e) => setMobilePhone(e.target.value)}
            placeholder="+380XXXXXXXXX"
            required
          />
        </div>

        {deliveryMethod !== 'pickup' && (
          <div className="checkout-field">
            <label htmlFor="address">–ê–¥—Ä–µ—Å–∞ –¥–æ—Å—Ç–∞–≤–∫–∏:üèòÔ∏è</label>
            <input
              type="text"
              id="address"
              value={address}
              onChange={(e) => setAddress(e.target.value)}
              required={deliveryMethod !== 'pickup'}
            />
          </div>
        )}

        <div className={`checkout-field ${paymentDeliveryError ? 'error' : ''}`}>
          <label htmlFor="deliveryMethod">–°–ø–æ—Å—ñ–± –¥–æ—Å—Ç–∞–≤–∫–∏:üõπ</label>
          <select
            id="deliveryMethod"
            value={deliveryMethod}
            onChange={(e) => setDeliveryMethod(e.target.value)}
            required
          >
            <option value="pickup">–°–∞–º–æ–≤–∏–≤—ñ–∑ (–±–µ–∑–∫–æ—à—Ç–æ–≤–Ω–æ)</option>
            <option value="novaPoshta">–ù–æ–≤–∞ –ø–æ—à—Ç–∞ (70 –≥—Ä–Ω)</option>
            <option value="ukrPost">–£–∫—Ä–ø–æ—à—Ç–∞ (60 –≥—Ä–Ω)</option>
            <option value="expressCompany">–ï–∫—Å–ø—Ä–µ—Å (SwiftCargo, 150 –≥—Ä–Ω)</option>
          </select>
        </div>

        <div className={`checkout-field ${paymentDeliveryError ? 'error' : ''}`}>
          <label htmlFor="paymentMethod">–°–ø–æ—Å—ñ–± –æ–ø–ª–∞—Ç–∏:ü™ô</label>
          <select
            id="paymentMethod"
            value={paymentMethod}
            onChange={(e) => setPaymentMethod(e.target.value)}
            required
          >
            <option value="monoCard">–û–ø–ª–∞—Ç–∞ —á–∞—Å—Ç–∏–Ω–∞–º–∏ –≤—ñ–¥ MonoBank (3%)</option>
            <option value="privatCard">–û–ø–ª–∞—Ç–∞ —á–∞—Å—Ç–∏–Ω–∞–º–∏ –≤—ñ–¥ –ü—Ä–∏–≤–∞—Ç–ë–∞–Ω–∫ (3%)</option>
            <option value="applePay">Apple Pay (2%)</option>
            <option value="googlePay">Google Pay (2%)</option>
            <option value="cash">–ì–æ—Ç—ñ–≤–∫–∞ (—Ç—ñ–ª—å–∫–∏ —Å–∞–º–æ–≤–∏–≤—ñ–∑)</option>
          </select>
          {paymentDeliveryError && <p className="error-message">{paymentDeliveryError}</p>}
        </div>

        <div className="checkout-summary">
          <p><span className="label">–ó–∞–≥–∞–ª—å–Ω–∞ —Å—É–º–∞ —Ç–æ–≤–∞—Ä—ñ–≤:</span> {cart.reduce((total, item) => total + item.price * item.quantity, 0)} –≥—Ä–Ω</p>
          {discount > 0 && (
            <p><span className="label">–ó–Ω–∏–∂–∫–∞:</span> -{discount.toFixed(2)} –≥—Ä–Ω</p>
          )}
          <p><span className="label">–î–æ—Å—Ç–∞–≤–∫–∞:</span> {deliveryMethod === 'pickup' ? '0' : deliveryMethod === 'novaPoshta' ? '70' : deliveryMethod === 'ukrPost' ? '60' : '150'} –≥—Ä–Ω</p>
          <p>
            <span className="label">–ö–æ–º—ñ—Å—ñ—è –∑–∞ –æ–ø–ª–∞—Ç—É:</span> {paymentFee} –≥—Ä–Ω{' '}
            {(paymentMethod === 'monoCard' || paymentMethod === 'privatCard') && <em>(3%)</em>}
            {paymentMethod === 'applePay' && <em>(2%)</em>}
            {paymentMethod === 'googlePay' && <em>(2%)</em>}
            {paymentMethod === 'cash' && <em>(–≥–æ—Ç—ñ–≤–∫–∞, —Ç—ñ–ª—å–∫–∏ –ø—Ä–∏ —Å–∞–º–æ–≤–∏–≤–æ–∑—ñ)</em>}
          </p>
          <p className="total">
            <span className="label">–í—Å—å–æ–≥–æ –¥–æ —Å–ø–ª–∞—Ç–∏:</span> {totalPrice} üíµ–≥—Ä–Ω
          </p>
        </div>

        <div className="checkout-actions">
          <button type="submit" disabled={Boolean(paymentDeliveryError)}>–ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è</button>
        </div>
      </form>
    </div>
  );
};

export default Checkout;
